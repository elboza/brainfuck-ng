.TH brainfuck-ng 1 "(c) 2015 Fernando Iazeolla"
.SH NAME
brainfuck-ng - a powerful interpreter of a superset of brainfuck lang.
.SH SYNOPSIS
.B bfng [ options ] [ file ]
.SH DESCRIPTION
.B brainfuck-ng
is a powerful interpreter of a superset of \fIbrainfuck\fP language. It is full compatible with brainfuck, and has in addition some enhancements.
.SH OPTIONS
.TP
.B -i, --interactive, --shell
interactive (shell mode)
.TP
.B -d 'datum', --data 'datum'
give an environment as a string (seen as an array).
For example,
.B bfng -d 'FooBar' -i
will enter the shell mode with the \fIdatum\fP 'FooBar' as the computation environment array.
.TP
.B -h, --help
print usage info
.TP
.B -s
will read the program from stdin.
.TP
.B -v, --version
show brainfuck-ng's version number
.TP
.B -o, --out
print the environment array to stdout after computation.
.TP
.B -p, --print
same as -o but with newline added. '\\n'
.TP
.B -r, --reversefuck
switch 'ReverseFuck' mode on. (See the \fIReverseFuck mode\fP Section below).
.TP
.B -m num, --size num
set the size (in bytes) of environment array (default is 32K).
.TP
.B -x 'datum', --exec 'datum'
get & execute bf prog datum.
.TP
.B -c, --cin
read environment-array from stdin.
.TP
.B -b file, --xfile file
read bf prog from file.
.TP
.B -a file ,dfile file
read environment-array from file.
.SH BRAINFUCK-NG'S LANGUAGE
brainfuck-ng operates on an array of memory cells, also referred to as the tape, each initially set to zero. There is a pointer, initially pointing to the first memory cell. The commands are:
.TP
.B <
decrement the data pointer (to point to the next cell to the left). ( \fB--ptr\fP ).
.TP
.B >
increment the data pointer (to point to the next cell to the right). ( \fB++ptr\fP ).
.TP
.B +
increment (increase by one) the byte at the data pointer. ( \fB++*ptr\fP ).
.TP
.B -
decrement (decrease by one) the byte at the data pointer. ( \fB--*ptr\fP ).
.TP
.B .
output the byte at the data pointer. ( \fBputchar(*ptr)\fP ).
.TP
.B ,
accept one byte of input, storing its value in the byte at the data pointer. ( \fB*ptr=getchar()\fP ).
.TP
.B [
if the byte at the data pointer is zero, then instead of moving the instruction pointer forward to the next command, jump it forward to the command after the matching ] command. ( \fBwhile (*ptr) {\fP ).
.TP
.B ]
if the byte at the data pointer is nonzero, then instead of moving the instruction pointer forward to the next command, jump it back to the command after the matching [ command. ( \fB}\fP ).
.TP
ng ENHANCEMENTS
.TP
.B !
output the integer at the data pointer. ( \fBprintf("%d",*ptr)\fP ).
.TP
.B ?
gets an integer and store it  into the data pointer. ( \fBscanf("%d",(char)ptr)\fP ).
.TP
.B @
quit returning data pointer value. ( \fBreturn *ptr\fP ).
.TP
every other character is ignored.
.SH RETURN VALUE
.TP
brainfuck-ng's interpreter \fIalways\fP return the value pointed by the last instruction executed.
.TP
example:
echo "+++>++" | bfng -s

echo $?
(will output 2)
.TP
by adding \fB-o\fP or \fB-p\fP parameter you can get also the environment printed to stdout.
.TP
example:
echo "+" | bfng -s -d'foo' -p

(will output 'goo')

echo $?
(will output 103 (ascii of 'g'))
.SH INTERPTETER COMMANDS
in shell interactive mode you can give brainfuck-ng interpreter the following command:
.TP
.B :q
quit interpreter
.TP
.B :h
print help summary
.TP
.B :ks (yes|no)
\fI:ks\fP print the keep state variable. \fI:ks yes\fP or \fI:ks no\fP set the keep state variable. The keep state variable can retain the value of the environment-array between line input.
.TP
.B :p
print the environment-array to stdout (added with \\n endline).
.TP
.B :r (yes|no)
enable/disable/show reverse-fuck mode.
.TP
.B :set datum
set the environment-array to \fIdatum\fP (and set \fI:ks yes\fP)
.TP
.B :z
print the last return value to stdout
.SH REVERSEFUCK MODE
In the \fBReverseFuck\fP mode all commands are switched to their semantic opposite. Here is an overview:

Instructions:

.TP
.B -
Increments the current cell (under the pointer).
.TP
.B +
Decrements the current cell (under the pointer).
.TP
.B >
Decrements pointer.
.TP
.B <
Increments pointer.
.TP
.B .
Inputs a character to current cell.
.TP
.B ,
Outputs a character from current cell.
.TP
.B ]
While the current cell value is not zero, do stuff inside ] and [ braces
.TP
.B [
End while.
.TP
.B !
input integer at current cell.
.TP
.B ?
output integer from current cell.
.TP
.B @
exit program returning current cel value( the only command not changed).
.TP
You can switch to ReverseFuck mode by adding the \fI-r\fP or \fI--reversefuck\fP option to the \fBbfng\fP interpreter.
.SH EXAMPLES
.TP
.B HelloWorld
++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.
.TP
.B This is a slightly more complex variant that often triggers interpreter bugs
>++++++++[<+++++++++>-]<.>>+>+>++>[-]+<[>[->+<<++++>]<<]>.+++++++..+++.>>+++++++.<<<[[-]<[-]>]<+++++++++++++++.>>.+++.------.--------.>>+.>++++.
.TP
.B get the return value:
% echo "+++"|bfng -s

% echo $?

3           #(the putput)
.TP
.B give an environment and get the result:
% echo "foobar"|bfng -c -x'+' -o

goobar       #(the output)

\fIor\fP

% echo "+"|bfng -d'foobar' -p

goobar        #(the output)
.TP
.B give an environment and a program from files:
% bfng -b program.bf -a env.data
.TP
.B simply execute a program
% bfng HelloWorld.bf
.TP
.B get input and give output from bf program:
% bfng -x '?+++!'

35                #(user keyboard input)

38                #(program output)

% echo $?

38                #(output)

.TP
.B enter interactive shell mode:
% bfng -i

.SH SEE ALSO
* http://github.com/elboza/brainfuck-ng/

* http://bitbucket.org/elboza/brainfuck-ng/

* http://esolangs.org/wiki/Brainfuck-ng
.SH AUTHOR
.nf
Fernando Iazeolla < xnando@cryptolab.net >
.SH COPYRIGHT
.nf
Copyright (C) 2015 Fernando Iazeolla < xnando@cryptolab.net >
.P
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.P
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.P
You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
